#lang racket

;; Podatkovni tipi
(struct true ()         #:transparent)
(struct false ()        #:transparent)
(struct int (const)     #:transparent)
(struct .. (e1 e2)      #:transparent)
(struct empty ()        #:transparent)
(struct exception (exn) #:transparent)

;; Strukture in operacije
(struct trigger (e) #:transparent)
(struct triggered (e) #:transparent)
(struct handle (e1 e2 e3) #:transparent)
(struct if-then-else (condition e1 e2) #:transparent)

(struct ?int (e) #:transparent)
(struct ?bool (e) #:transparent)
(struct ?.. (e) #:transparent)
(struct ?seq (e) #:transparent)
(struct ?empty (e) #:transparent)
(struct ?exception (e) #:transparent)

(struct add (e1 e2) #:transparent)
(struct mul (e1 e2) #:transparent)
(struct ?leq (e1 e2) #:transparent)
(struct head (e) #:transparent)
(struct tail (e) #:transparent)
(struct ~ (e) #:transparent)
(struct ?any (e) #:transparent)
(struct ?all (e) #:transparent)
(struct ?= (e1 e2) #:transparent)

; Okolje za spremenljivke
(struct vars (s e1 e2) #:transparent)
(struct valof (s) #:transparent)

; Funkcije, skripte, ovojnice
(struct fun (name farg body) #:transparent)
(struct proc (name body) #:transparent)
(struct closure (env f) #:transparent)
(struct call (e args) #:transparent)




(define (fri expression environment)
  (letrec ([friq (lambda (e env)
                   (cond
                     [(true? e) (true)]
                     [(false? e) (false)]
                     [(int? e) (if (integer? (int-const e)) e (friq (trigger (exception "int: wrong argument type")) env))]
                     [(..? e)
                      (let ([v1 (friq (..-e1 e) env)]
                            [v2 (friq (..-e2 e) env)])
                      (cond
                        [(triggered? v1) v1]
                        [(triggered? v2) v2]
                        [#t (.. v1 v2)]))]
                     [(empty? e) (empty)]
                     [(exception? e) (if (string? (exception-exn e)) e (friq (trigger (exception "exception: wrong argument type")) env))]
                     [(triggered? e) e]
                     ; Operacije
                     [(trigger? e)
                      (let ([v1 (friq (trigger-e e) env)])
                        (cond
                          [(triggered? v1) v1]
                          [(exception? v1) (triggered v1)]
                          [#t (triggered (exception "trigger: wrong argument type"))]))]
                     [(handle? e)
                      (let ([v1 (friq (handle-e1 e) env)]
                            [v2 (friq (handle-e2 e) env)]
                            [v3 (friq (handle-e3 e) env)])
                        (if (triggered? v1) v1 (if (not (exception? v1)) (triggered (exception "handle: wrong argument type"))
                                                   (if (not (triggered? v2)) v2
                                                       (if (eq? (exception-exn v1) (exception-exn (triggered-e v2))) v3 v2)))))]
                     ; Lovljenje izjem
                     [(if-then-else? e)
                      (let ([v1 (friq (if-then-else-condition e) env)])
                            ;[v2 (friq (if-then-else-e2 e) env)]
                            ;[v3 (friq (if-then-else-e1 e) env)]
                        (cond
                          [(triggered? v1) v1]
                          ;[(triggered? v3) v3]
                          ;[(triggered? v2) v2]
                          [(false? v1)
                           (let ([v2 (friq (if-then-else-e2 e) env)])
                             v2)]
                          [#t
                           (let ([v3 (friq (if-then-else-e1 e) env)]) v3)]))]
                     ; Preverjanje tipov
                     [(?int? e)
                      (let ([v1 (friq (?int-e e) env)])
                        (cond
                          [(triggered? v1) v1]
                          [(int? v1) (true)]
                          [#t (false)]))]
                     [(?bool? e)
                      (let ([v1 (friq (?bool-e e) env)])
                        (cond
                          [(triggered? v1) v1]
                          [(or (true? v1) (false? v1)) (true)]
                          [#t (false)]))]
                      [(?..? e)
                       (let ([v1 (friq (?..-e e) env)])
                         (cond
                           [(triggered? v1) v1]
                           [(..? v1) (true)]
                           [#t (false)]))]
                      [(?seq? e)
                       (let ([v1 (friq (?seq-e e) env)])
                         (if (triggered? v1) v1
                         (if (..? v1) (friq (?seq (..-e2 v1)) env) (if (empty? v1) (true) (false)))))]
                      [(?empty? e)
                       (let ([v1 (friq (?empty-e e) env)])
                         (cond
                           [(triggered? v1) v1]
                           [(empty? v1) (true)]
                           [#t (false)]))]
                      [(?exception? e)
                       (let ([v1 (friq (?exception-e e) env)])
                         (cond
                           [(triggered? v1) v1]
                           [(exception? v1) (true)]
                           [#t (false)]))]
                      ; Sestevanje
                      [(add? e)
                       (let ([v1 (friq (add-e1 e) env)]
                             [v2 (friq (add-e2 e) env)])
                         (cond
                           [(triggered? v1) v1]
                           [(triggered? v2) v2]
                           [(and (int? v1) (int? v2)) (int (+ (int-const v1) (int-const v2)))]
                           [(and (false? v1) (false? v2)) (false)]
                           [(and (false? v1) (true? v2)) (true)]
                           [(and (true? v1) (false? v2)) (true)]
                           [(and (true? v1) (true? v2)) (true)]
                           [(and (true? (friq (?seq v1) env)) (true? (friq (?seq v2) env))) (if (empty? v1) v2 (.. (..-e1 v1) (friq (add (..-e2 v1) v2) env)))]
                           [#t (friq (trigger (exception "add: wrong argument type")) env)]))]
                      ; Mnozenje
                      [(mul? e)
                       (let ([v1 (friq (mul-e1 e) env)]
                             [v2 (friq (mul-e2 e) env)])
                         (cond
                           [(triggered? v1) v1]
                           [(triggered? v2) v2]
                           [(and (int? v1) (int? v2)) (int (* (int-const v1) (int-const v2)))]
                           [(and (false? v1) (false? v2)) (false)]
                           [(and (false? v1) (true? v2)) (false)]
                           [(and (true? v1) (false? v2)) (false)]
                           [(and (true? v1) (true? v2)) (true)]
                           [#t (friq (trigger (exception "mul: wrong argument type")) env)]))]
                      ; Primerjanje
                      [(?leq? e)
                       (let ([v1 (friq (?leq-e1 e) env)]
                             [v2 (friq (?leq-e2 e) env)])
                         (cond
                           [(triggered? v1) v1]
                           [(triggered? v2) v2]
                           [(and (int? v1) (int? v2)) (if (<= (int-const v1) (int-const v2)) (true) (false))]
                           [(and (false? v1) (false? v2)) (true)]
                           [(and (false? v1) (true? v2)) (true)]
                           [(and (true? v1) (false? v2)) (false)]
                           [(and (true? v1) (true? v2)) (true)]
                           [(and (true? (friq (?seq v1) env)) (true? (friq (?seq v2) env)))
                            (cond
                              [(and (empty? v1) (not (empty? v2))) (true)]
                              [(and (not (empty? v1)) (empty? v2)) (false)]
                              [(and (empty? v1) (empty? v2)) (true)]
                              [#t (friq (?leq (..-e2 v1) (..-e2 v2)) env)])]
                           [#t (friq (trigger (exception "?leq: wrong argument type")) env)]))]
                      ; Ujemanje
                      [(?=? e)
                       (let ([v1 (friq (?=-e1 e) env)]
                             [v2 (friq (?=-e2 e) env)])
                         (cond
                           [(triggered? v1) v1]
                           [(triggered? v2) v2]
                           [(and (int? v1) (int? v2)) (if (eq? (int-const v1) (int-const v2)) (true) (false))]
                           [(and (false? v1) (false? v2)) (true)]
                           [(and (false? v1) (true? v2)) (false)]
                           [(and (true? v1) (false? v2)) (false)]
                           [(and (true? v1) (true? v2)) (true)]
                           [(and (empty? v1) (empty? v2)) (true)]
                           [(or (and (not (empty? v1)) (empty? v2)) (and (not (empty? v2)) (empty? v1))) (false)]
                           [(and (..? v1)  (..? v2))
                            (cond
                              [(true? (friq (?= (..-e1 v1) (..-e1 v2)) env)) (friq (?= (..-e2 v1) (..-e2 v2)) env)]
                              [#t (false)])]
                           [#t (false)]))]
                      ; Ekstrakcija head/tail
                      [(head? e)
                       (let ([v1 (friq (head-e e) env)])
                         (cond
                           [(triggered? v1) v1]
                           [(empty? v1) (friq (trigger (exception "head: empty sequence")) env)]
                           [(..? v1) (..-e1 v1)]
                           [#t (friq (trigger (exception "head: wrong argument type")) env)]))]
                      [(tail? e)
                       (let ([v1 (friq (tail-e e) env)])
                         (cond
                           [(triggered? v1) v1]
                           [(empty? v1) (friq (trigger (exception "tail: empty sequence")) env)]
                           [(..? v1) (..-e2 v1)]
                           [#t (friq (trigger (exception "tail: wrong argument type")) env)]))]
                      ; Negacija
                      [(~? e)
                       (let ([v1 (friq (~-e e) env)])
                         (cond
                           [(triggered? v1) v1]
                           [(int? v1) (int (- (int-const v1)))]
                           [(false? v1) (true)]
                           [(true? v1) (false)]
                           [#t (friq (trigger (exception "~: wrong argument type")) env)]))]
                      ; Operatorja all/any
                      [(?all? e)
                       (let ([v1 (friq (?all-e e) env)])
                         (cond
                           [(triggered? v1) v1]
                           [(true? (friq (?seq v1) env))
                            (cond
                              [(empty? v1) (true)]
                              [(false? (..-e1 v1)) (false)]
                              [#t (friq (?all (..-e2 v1)) env)])]
                           [#t (friq (trigger (exception "?all: wrong argument type")) env)]))]
                      [(?any? e)
                       (let ([v1 (friq (?any-e e) env)])
                         (cond
                           [(triggered? v1) v1]
                           [(true? (friq (?seq v1) env))
                            (cond
                              [(empty? v1) (false)]
                              [(true? (..-e1 v1)) (true)]
                              [#t (friq (?any (..-e2 v1)) env)])]
                            [#t (friq (trigger (exception "?any: wrong argument type")) env)]))]
                      ; Spremenljivke
                      [(vars? e)
                       (cond
                         [(not (list? (vars-s e)))
                          (friq (vars-e2 e) (append (list (cons (vars-s e) (friq (vars-e1 e) env))) env))]
                         [(not (equal? (vars-s e) (remove-duplicates (vars-s e)))) (friq (trigger (exception "vars: duplicate identifier")) env)]
                         ; Predpostavimo, da sta seznama enake dolžine
                         [#t (letrec ([combine (lambda (s e1)
                                                 (cond
                                                   [(null? s) '()]
                                                   [#t (append (list (cons (car s) (friq (car e1) env))) (combine  (cdr s) (cdr e1)))]))])
                               (friq (vars-e2 e) (append (combine (vars-s e) (vars-e1 e)) env)))])]
                          
                         
                      [(valof? e)
                       (letrec ([inic (lambda (s env)
                                        (cond
                                          [(null? env) (friq (trigger (exception "valof: undefined variable")) env)]
                                          [(equal? s (car (car env))) (cdr (car env))]
                                          [#t (inic s (cdr env))]
                                        ))])
                         ;(print (valof-s e)) (print (inic (valof-s e) env)) (print env)
                         (inic (valof-s e) env))]
                      ; Funkcija
                      [(fun? e)
                       (cond
                         [(not (list? (fun-farg e))) (closure env e)]
                         [(not (equal? (fun-farg e) (remove-duplicates (fun-farg e)))) (friq (trigger (exception "fun: duplicate argument identifier")) env)]
                         [#t (closure env e)])]
                      ; Skripta (procedure)
                      [(proc? e) e]
                      ; Klicanje
                      [(call? e)
                       (let ([v1 (friq (call-e e) env)]
                             [v2 (call-args e)])
                         (cond
                           [(closure? v1)
                            (if (zero? (- (length (fun-farg (closure-f v1))) (length v2)))
                                (letrec ([build_env (lambda (fargs args)
                                                      (cond
                                                        [(null? fargs) '()]
                                                        [#t (append (list (cons (car fargs) (friq (car args) env))) (build_env (cdr fargs) (cdr args)))]))])
                                  (let ([klic (friq (fun-body (closure-f v1)) (append (build_env (fun-farg (closure-f v1)) v2) (list (cons (fun-name (closure-f v1)) v1)) (closure-env v1)))])
                                    (cond
                                      [(triggered? klic) (if (equal? (exception "valof: undefined variable") (triggered-e klic))
                                                             (friq (trigger (exception "closure: undefined variable")) env) klic)]
                                      [#t klic])))
                                  
                                (friq (trigger (exception "call: arity mismatch")) env))]
                           [(proc? v1)
                            (if (null? v2) (friq (proc-body v1) (append (list (cons (proc-name v1) v1)) env)) (friq (trigger (exception "call: arity mismatch")) env))]

                           [(triggered? v1) v1]
                           
                           [#t (friq (trigger (exception "call: wrong argument type")) env)]
                           ))]
                     ))])
    
    (friq expression environment)))

;; Makri

(define-syntax greater
  (syntax-rules ()
    [(greater e1 e2)
     (cond
       [(true? (fri (?= e1 e2) null)) (false)]
       [#t (?leq e2 e1)])]))


(define (to_seq sez)
  (cond
    [(null? sez) (empty)]
    [#t (.. (car sez) (to_seq (cdr sez)))]))

(define-syntax rev
  (syntax-rules ()
    [(rev e)
     (letrec ([reverse (lambda (r)
                         (cond
                           [(empty? r) '()]
                           [(empty? (..-e2 r)) (list (..-e1 r))]
                           [#t (append (reverse (..-e2 r)) (list (..-e1 r)))]))])
       (to_seq (reverse (fri e null))))]))
                       


(define (v_zap sez)
  (cond
    [(null? sez) (empty)]
    [#t (.. (int (car sez)) (v_zap (cdr sez)))]))

(define-syntax binary
  (syntax-rules ()
    [(binary e1)
     (let
         ([v1 (fri e1 null)])
       (cond
         [(?int v1) (if (> (int-const v1) 0)                              
                         (letrec ([bin (lambda (e sez)
                                        (cond
                                          [(< e 2) (append (list (remainder e 2)) sez)]
                                          [#t (append (bin (quotient e 2) (list (remainder e 2))) sez)]))])
                      (v_zap (bin (int-const v1) null)))
                    (true))]))]))
                                  

(define-syntax mapping
  (syntax-rules ()
    [(mapping f seq)
     (letrec ([map_it (lambda (s)
                         (cond
                           [(true? (fri (?empty s) null)) (empty)]
                           [#t (.. (fri (call f (list (..-e1 s))) null) (map_it (..-e2 s)))]))])
       (map_it seq))]))

(define-syntax filtering
  (syntax-rules ()
    [(filtering f seq)
     (letrec ([filter_it (lambda (s)
                           (if (true? (fri (?empty s) null)) (empty)
                           (let ([v1 (fri (call f (list (..-e1 s))) null)])
                             (cond
                               [(true? v1) (.. (..-e1 s) (filter_it (..-e2 s)))]
                               [#t (filter_it (..-e2 s))]))))])
       (filter_it seq))]))

(define-syntax folding
  (syntax-rules ()
    [(folding f init seq)
     (letrec ([fold_it (lambda (s)
                         (cond
                           [(empty? s) init]
                           [#t (fri (..-e1 s) (fold_it (..-e2 s)))]))])
       (fold_it seq))]))
                     
                   
